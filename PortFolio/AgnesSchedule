function agnesAL() {

let ss = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();




/**
 * Trigger Issue
 * https://developers.google.com/apps-script/guides/triggers/events
 */

// function onEDIT(evt){
//   var spreadsheet = evt.source.getActiveSheet().getSheetName();//getname without activate Sheet, source is whole spreadsheet
//   var range = evt.range; //get the edited range with row/col start and end
//   var ecol = range.getColumn(); 
//   var erow = range.getRow();
//   var pValue = evt.oldValue; 
//   var nValue = evt.value;
//   console.log([spreadsheet,ecol,erow,pValue,nValue]);
  
// };



 
// function  onSUBMIT(evt) {
//   var spreadsheet = evt.source.getActiveSheet().getSheetName();
//   var range = evt.range; //the range pasted on spreadsheet
//   var ecol = range.getLastColumn();
//   var erow = range.getRow();
//   var evtval = evt.values; //get the array of outcome
//   var evtnval = evt.namedValues; //get object of outcome

  // console.log(range);
  // console.log([spreadsheet,erow,ecol]);

//// Transfer to JSON string
// SpreadsheetApp.getActiveSpreadsheet().getSheetByName("testing trigger").getRange("B11").setValue(JSON.stringify(evtnval));

//// Get Back JSON data
// let user = JSON.parse( SpreadsheetApp.getActiveSpreadsheet().//getSheetByName("testing trigger").getRange("B11").getValue());
//};


//End


/**
 * if Local Time is Singapore Time
 * Spreadsheet will treat it as SIngapore Time, but show new york Time
 */

//// Filter Duplicate in Date Object
// let dates = ss.getRange("A1:A5").getValues().map( x => x[0]);
// let dateset = Array.from(new Set(dates));
// ss.getRange("B1:B4").setValues(dateset.map(x => [new Date(x)]));

////Change Date to String
//Utilities.formatDate(new Date(d2), "UTC+8", "dd MMM yyyy")
////OR
//new Date( dateobject_fromSpreadsheet.toString()+ "UTC+0800")


//change date to UTC +8
// new Date( "date" + "UTC+0800");


//get accurate millisecond
// new Date ("date").getTime();

// ////Get Random Element From Array
// var items = ["a",1,3,5];
// var item = items[Math.floor(Math.random() * items.length)];



// ////Set Background color
//   var spreadsheet = SpreadsheetApp.getActive();
//   spreadsheet.getRange('F24').activate();
//   spreadsheet.getActiveRangeList().setBackground('#00ffff');



// End Here


/**
 * getHeaderA1 Fn get column index and return A1 notation
 * notFn convert number to A1 notation
 */

function getHeaderA1(sheet,header,header_row = "1:1"){
   return  notFn(  (sheet.getRange(header_row).getValues())[0].indexOf(header));
};
notFn = (n) => (a=Math.floor((n)/26)) >= 0 ? notFn(a-1) + String.fromCharCode(65+((n)%26)) : '';


    // var ss = SpreadsheetApp.getActiveSheet();
    // console.log(getHeaderA1( ss,"J"));



/**
 * Get Last Row with non-empty element
 */

function nonEmpty_LastRow(sheet, colA1){
    var colData = sheet.getRange(`${colA1}:${colA1}`).getValues();
    return 1 + colData.reduce( (acc, cur,idx ) => cur[0] !== '' ? idx:acc,-1)

}
      // var ss = SpreadsheetApp.getActiveSheet();
      // console.log(nonEmpty_LastRow(ss,getHeaderA1(ss,"Jackie")));


//End Here






/**
 * Insert Number in Sorted Array
 * by using map and sorted fn
 * header and blank data will be move above during comparison
 */

// var ss = SpreadsheetApp.getActiveSheet();
// var ssdata = ss.getDataRange().getValues();
// var newdata = [2550];

// //push and sort data
// sortedSSdata = ssdata.map( (x,i) => x.concat([i+1]) ).concat([newdata]).sort( (a,b) => a[0] - b[0]  ); 

// var newdata_position = sortedSSdata.findIndex( x => x.length == 1 );
// var col_after = sortedSSdata[newdata_position-1][1];

// //find the pasted row
//  SpreadsheetApp.getActiveSheet().insertRowAfter(col_after);
// console.log(`paste at row ${col_after + 1}`);



//Example of Sorting using Time Format (millisec)

// var ss = SpreadsheetApp.getActiveSheet();
// var ssdata = ss.getRange("A1:A5").getValues();
// var newdata = [ss.getRange("D2").getValue()];
    // console.log(ssdata);
    // console.log(newdata);

//push and sort data (by using getTime Fn)
//  sortedSSdata = ssdata.map( (x,i) => x.concat([i+1]) ).concat([newdata]).map(x =>  (typeof x[0] == 'object'&& x[0]!=='')? [x[0].getTime(),x[1]]:x   ).sort( (a,b) => a[0] - b[0]  );
    
    //console.log(sortedSSdata);

// var newdata_position = sortedSSdata.findIndex( x => x[1] == undefined  );
    //console.log(newdata_position);

// var col_after = sortedSSdata[newdata_position-1][1];

////find the pasted row
    // SpreadsheetApp.getActiveSheet().insertRowAfter(col_after);
    //console.log(`paste at row ${col_after + 1}`);




}



function splitDate() {


// Declare Variable
var ss = SpreadsheetApp.getActiveSpreadsheet();
var sheet = ss.getSheetByName("Form responses 8");

var header = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Form responses 8").getRange("A1:F1").getValues();

var fd = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Form responses 8").getRange("A39:F39").getValues(); //form data




// Parse into Object
    var fdobj = header[0].reduce( (acc, cur, i) => {
          acc[cur] = fd[0][i];
            return acc
       } ,{})

    console.log(fdobj);

// Split Date to 3 Groups (OBJECT)
    
for ( key in fdobj){
  (key == 'Date of Application' | key == 'Date of Application (Option 2)')? (fdobj[key] = {
  Full: ( fdobj[key].split(/[,，]/)).filter( x => !(/HF[12]/.test(x))) ,
  HF1:  ( fdobj[key].split(/[,，]/)).filter( x => (/HF1/).test(x)),
  HF2:  ( fdobj[key].split(/[,，]/)).filter( x => (/HF2/).test(x))}):''
}

      // console.log(fdobj);



// Convert Date Function
    //Need a Fn  convert to Normal Date
      //delete HF1 and HF2
      //range convert
            //calculate Dates
            //getDate + 1 
            //reduce function, create Arrayfrom to loop
            //reference https://stackoverflow.com/questions/4413590/javascript-get-array-of-dates-between-2-dates
            //https://javascript.info/date
      //return dateString
      //check invalid Date






//Write in JSON column
// SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Form responses 8").getRange("I39").setValue(JSON.stringify(fdobj));


}
